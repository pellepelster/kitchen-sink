#!/usr/bin/env bash

set -o errexit  -o nounset -o pipefail

DIR="$(cd "$(dirname "$0")" ; pwd -P)"

function hetzner_ssh_wrapper() {
  local host="${1:-}"
  shift || true
  ssh -F "${DIR}/hetzner/ssh/ssh_config" "root@${host}" $@
}

function hetzner_terraform() {
  export HCLOUD_TOKEN="${HCLOUD_TOKEN:-$(pass solidblocks/hetzner/test/hcloud_api_token)}"
  (
    cd "${DIR}/hetzner"
    terraform $@
  )
}

function divider_bold() {
  echo "=================================================================================================="
}

function divider_thin() {
  echo "--------------------------------------------------------------------------------------------------"
}

# snippet[postgres-performance-ensure_scenario]
function ensure_scenario() {
  SCENARIO="${1:-}"

  if [[ -z "${SCENARIO}" ]]; then
    echo "no scenario provided"
    exit 1
  fi

  if [[ ! -f "${DIR}/scenarios/${SCENARIO}" ]]; then
    echo "scenario '${SCENARIO}' not found"
    exit 1
  fi

  divider_bold
  echo "loading scenario '${SCENARIO}'"
  export $(grep -v '^#' "${DIR}/scenarios/${SCENARIO}" | xargs)
  divider_thin
  echo "postgresql instance type: ${POSTGRESQL_INSTANCE_SIZE}"
  echo "pgbench init scale: ${PGBENCH_INIT_SCALE}"
  echo "pgbench run time: ${PGBENCH_TIME}"
  echo "pgbench aggregation interval: ${PGBENCH_AGGREGATION_INTERVAL}"
  echo "pgbench clients: ${PGBENCH_CLIENTS}"
  echo "pgbench jobs: ${PGBENCH_JOBS}"
  divider_bold
  echo ""
}
# /snippet

function ensure_test_id() {
  TEST_ID="${1:-}"

  if [[ -z "${TEST_ID}" ]]; then
    echo "no test id provided"
    exit 1
  fi
  divider_bold
  echo "test id '${TEST_ID}'"
  divider_bold
  echo ""
}

# snippet[postgres-performance-task_hetzner_deploy]
function task_hetzner_deploy() {
  ensure_scenario "${1:-}"
  echo ""

  divider_bold
  echo "deploying postgresql database with instance size '${POSTGRESQL_INSTANCE_SIZE}'"
  divider_thin
  export TF_VAR_instance_type=${POSTGRESQL_INSTANCE_SIZE}
  hetzner_terraform init -upgrade
  hetzner_terraform apply -auto-approve -target hcloud_volume.backup
  hetzner_terraform apply -auto-approve -target hcloud_volume.data
  hetzner_terraform apply -auto-approve
  divider_bold
}
# /snippet

function task_hetzner_pgbench_init() {
  ensure_scenario "${1:-}"

  local db_host="$(hetzner_terraform output -raw ipv4_address)"
  hetzner_ssh_wrapper pgbench PGPASSWORD="pgbench" pgbench -h ${db_host} -U pgbench pgbench --initialize --scale ${PGBENCH_INIT_SCALE}
}

function task_hetzner_test() {
  ensure_scenario "${1:-}"
  ensure_test_id "${2:-}"

  #task_hetzner_deploy ${SCENARIO}

  local db_host="$(hetzner_terraform output -raw ipv4_address)"
  while ! nc -z ${db_host} 5432; do
    echo "waiting for database"
    sleep 1
  done

  task_hetzner_pgbench_init ${SCENARIO}
  task_hetzner_pgbench_run ${SCENARIO} ${TEST_ID}
  task_hetzner_pgbench_logs ${SCENARIO} ${TEST_ID}
  task_hetzner_pgbench_graph ${SCENARIO} ${TEST_ID}
}

function task_hetzner_clean {
    hetzner_terraform destroy -auto-approve
}

function task_hetzner_pgbench_run() {
  ensure_scenario "${1:-}"
  ensure_test_id "${2:-}"

  local db_host="$(hetzner_terraform output -raw ipv4_address)"

  hetzner_ssh_wrapper "pgbench" "rm -f ${SCENARIO}_${TEST_ID}.*"
  hetzner_ssh_wrapper pgbench PGPASSWORD="pgbench" pgbench -h ${db_host} -U pgbench pgbench --client ${PGBENCH_CLIENTS} --jobs ${PGBENCH_JOBS} --time ${PGBENCH_TIME} --progress ${PGBENCH_AGGREGATION_INTERVAL} --log --log-prefix "${SCENARIO}_${TEST_ID}" --aggregate-interval ${PGBENCH_AGGREGATION_INTERVAL}
}

function task_hetzner_pgbench_logs() {
  ensure_scenario "${1:-}"
  ensure_test_id "${2:-}"

  local logs_dir="${DIR}/results/${SCENARIO}/${TEST_ID}/logs"

  rm -rf "${logs_dir}"
  mkdir -p "${logs_dir}"
  scp -F "${DIR}/hetzner/ssh/ssh_config" "root@pgbench:${SCENARIO}_${TEST_ID}.*" "${logs_dir}"
}

function task_hetzner_pgbench_graph() {
  ensure_scenario "${1:-}"
  ensure_test_id "${2:-}"

  local results_dir="${DIR}/results/${SCENARIO}/${TEST_ID}"
  local logs_dir="${results_dir}/logs"
  local rrds_dir="${results_dir}/rrds"

  rm -rf ${rrds_dir}
  mkdir -p ${rrds_dir}

  local colors=("#808080" "#800000" "#006400" "#808000" "#483d8b" "#3cb371" "#008b8b" "#4682b4" "#d2691e" "#00008b" "#32cd32" "#800080" "#b03060" "#d2b48c" "#ff0000" "#ffa500" "#00ff00" "#00fa9a" "#8a2be2" "#dc143c" "#0000ff" "#adff2f" "#d8bfd8" "#ff00ff" "#1e90ff" "#fa8072" "#ffff54" "#87ceeb" "#ff1493" "#7b68ee" "#ee82ee" "#7fffd4")
  local rrd_def_tps=""

  for logfile in ${logs_dir}/*; do
    local logfile_index="${logfile##*.}"
    if [[ "$(echo "${logfile}" | tr -cd '.' | wc -c)" == "1" ]]; then
      logfile_index="0"
    fi

    local rrd_file=""${rrds_dir}/${TEST_ID}_${logfile_index}.rrd""
    echo "parsing logfile ${logfile} into '${rrd_file}'"

    while read p; do
      local interval_start=$(echo "$p" | awk -F ' ' '{print $1}')
      local num_transactions=$(echo "$p" | awk -F ' ' '{print $2}')
      local job="job${logfile_index}"

      if [[ ! -f "${rrd_file}" ]]; then
        rrd_def_tps="${rrd_def_tps} DEF:${job}=${rrd_file}:${job}:AVERAGE AREA:${job}${colors[${logfile_index}]}:${job}:STACK"
        rrdtool create "${rrd_file}" --step ${PGBENCH_AGGREGATION_INTERVAL} DS:${job}:GAUGE:${PGBENCH_AGGREGATION_INTERVAL}:U:U RRA:AVERAGE:0.5:1:1200 --start $((${interval_start}-1))
      fi

      rrdtool update "${rrd_file}" "${interval_start}:$((${num_transactions}/${PGBENCH_AGGREGATION_INTERVAL}))"
    done <"${logfile}"

  done

  local logfile=$(ls ${logs_dir}/* | tail -1)
  local interval_start_max=$(cat "${logfile}" | awk -F ' ' '{print $1}' | sort -n | tail -1)
  local interval_start_min=$(cat "${logfile}" | awk -F ' ' '{print $1}' | sort -n -r | tail -1)

  rrdtool graph "${results_dir}/${TEST_ID}_tps.png" \
    --start ${interval_start_min} \
    --end ${interval_start_max} \
    --title "${SCENARIO} ${TEST_ID}" \
    --width 1024 \
    --height 300 \
    --vertical-label "TPS" \
        ${rrd_def_tps}

  xdg-open "${results_dir}/${TEST_ID}_tps.png"
}

function task_hetzner_info() {
  local tables_size_query=$(cat <<-END
SELECT
   relname  as table_name,
   pg_size_pretty(pg_indexes_size(relid)) as "Index Size",
   pg_size_pretty(pg_relation_size(relid)) as "Table Size"
   FROM pg_catalog.pg_statio_user_tables
ORDER BY pg_total_relation_size(relid) DESC;
END
)

  local db_host="$(hetzner_terraform output -raw ipv4_address)"
  echo ${tables_size_query} | hetzner_ssh_wrapper pgbench PGPASSWORD="pgbench" psql -h ${db_host} -U pgbench pgbench
}

ARG=${1:-}
shift || true

case ${ARG} in
  hetzner-deploy) task_hetzner_deploy $@ ;;
  hetzner-pgbench-init) task_hetzner_pgbench_init $@ ;;
  hetzner-pgbench-run) task_hetzner_pgbench_run $@ ;;
  hetzner-pgbench-logs) task_hetzner_pgbench_logs $@ ;;
  hetzner-pgbench-graph) task_hetzner_pgbench_graph $@ ;;
  hetzner-clean) task_hetzner_clean $@ ;;
  hetzner-info) task_hetzner_info $@ ;;
  hetzner-test) task_hetzner_test $@ ;;
esac
